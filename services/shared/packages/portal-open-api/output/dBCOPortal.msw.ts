/**
 * Generated by orval v6.13.1 🍺
 * Do not edit manually.
 * DBCO Portal
 * API used for the portal for healthcare (BCO) workers
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'
import {
  StatusIndexContactTracing,
  PlannerView,
  BCOStatus,
  BCOPhase,
  TestResultSource
} from './schemas'

export const getCasesCaseAssignmentMock = () => ({uuid: faker.datatype.uuid(), caseId: faker.random.word(), hpzoneNumber: {}, testMonsterNumber: {}, contactsCount: faker.datatype.number({min: undefined, max: undefined}), dateOfBirth: faker.date.past().toISOString().split('T')[0], dateOfTest: faker.date.past().toISOString().split('T')[0], dateOfSymptomOnset: faker.date.past().toISOString().split('T')[0], statusIndexContactTracing: faker.helpers.arrayElement(Object.values(StatusIndexContactTracing)), statusExplanation: faker.random.word(), createdAt: faker.random.word(), updatedAt: faker.random.word(), organisation: faker.helpers.arrayElement([{},{uuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), abbreviation: faker.helpers.arrayElement([faker.random.word(), undefined]), name: faker.helpers.arrayElement([faker.random.word(), undefined]), isCurrent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}]), assignedOrganisation: faker.helpers.arrayElement([{},{uuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), abbreviation: faker.helpers.arrayElement([faker.random.word(), undefined]), name: faker.helpers.arrayElement([faker.random.word(), undefined]), isCurrent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}]), assignedCaseList: faker.helpers.arrayElement([{},{uuid: faker.datatype.uuid(), isQueue: faker.datatype.boolean(), name: faker.helpers.arrayElement([faker.random.word(), undefined])}]), assignedUser: faker.helpers.arrayElement([{},{uuid: faker.datatype.uuid(), isCurrent: faker.datatype.boolean(), name: faker.helpers.arrayElement([faker.random.word(), undefined])}]), isEditable: faker.datatype.boolean(), isDeletable: faker.datatype.boolean(), isClosable: faker.datatype.boolean(), isReopenable: faker.datatype.boolean(), isAssignable: faker.datatype.boolean(), canChangeOrganisation: faker.datatype.boolean(), isApproved: {}, label: {}, plannerView: faker.helpers.arrayElement(Object.values(PlannerView)), bcoStatus: faker.helpers.arrayElement(Object.values(BCOStatus)), bcoPhase: faker.helpers.arrayElement(Object.values(BCOPhase)), wasOutsourced: faker.datatype.boolean(), wasOutsourcedToOrganisation: faker.helpers.arrayElement([{},{name: faker.random.word()}]), lastAssignedUserName: {}, priority: faker.datatype.number({min: undefined, max: undefined}), caseLabels: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({uuid: faker.datatype.uuid(), label: faker.datatype.boolean(), is_selectable: faker.datatype.boolean()})), hasNotes: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), testResults: faker.helpers.arrayElements(Object.values(TestResultSource)), age: {}, vaccinationCount: {}, mostRecentVaccinationDate: faker.date.past().toISOString().split('T')[0]})

export const getCasesCaseAssignmentOptionsMock = () => ({options: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{type: faker.helpers.arrayElement(['separator'])},{label: faker.random.word(), isSelected: faker.datatype.boolean(), isEnabled: faker.datatype.boolean(), isQueue: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), assignmentType: faker.helpers.arrayElement([faker.helpers.arrayElement(['caseList','organisation','user']), undefined]), assignment: faker.helpers.arrayElement([{,assignedCaseListUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedOrganisationUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedUserUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined])},{,assignedCaseListUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedOrganisationUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedUserUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined])},{,assignedCaseListUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedOrganisationUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedUserUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined])}])},{}])))})

export const getCasesAssignmentMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({caseId: faker.random.word(), assignmentStatus: faker.random.word()})))

export const getCasesAssignmentOptionsMock = () => ({options: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{type: faker.helpers.arrayElement(['separator'])},{label: faker.random.word(), isSelected: faker.datatype.boolean(), isEnabled: faker.datatype.boolean(), isQueue: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), assignmentType: faker.helpers.arrayElement([faker.helpers.arrayElement(['caseList','organisation','user']), undefined]), assignment: faker.helpers.arrayElement([{,assignedCaseListUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedOrganisationUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedUserUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined])},{,assignedCaseListUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedOrganisationUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedUserUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined])},{,assignedCaseListUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedOrganisationUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), assignedUserUuid: faker.helpers.arrayElement([faker.datatype.uuid(), undefined])}])},{}])))})

export const getLoadFragmentMock = () => ({data: {schemaVersion: faker.datatype.number({min: undefined, max: undefined})}})

export const getUpdateFragmentMock = () => ({data: {schemaVersion: faker.datatype.number({min: undefined, max: undefined})}})

export const getDBCOPortalMSW = () => [
rest.put('*/cases/:_case/assignment', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCasesCaseAssignmentMock()),
        )
      }),rest.post('*/cases/:_case/assignment/options', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCasesCaseAssignmentOptionsMock()),
        )
      }),rest.put('*/cases/assignment', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCasesAssignmentMock()),
        )
      }),rest.post('*/cases/assignment/options', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCasesAssignmentOptionsMock()),
        )
      }),rest.get('*/contexts/:context/fragments/contact', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getLoadFragmentMock()),
        )
      }),rest.put('*/contexts/:context/fragments/contact', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUpdateFragmentMock()),
        )
      }),]
