/**
 * Generated by orval v6.13.1 üç∫
 * Do not edit manually.
 * DBCO Portal
 * API used for the portal for healthcare (BCO) workers
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CovidCase,
  CaseAssignmentStatus,
  CaseAssignment,
  CasesCaseAssignmentOptions200,
  CasesAssignmentBody,
  CasesAssignmentOptions200,
  CasesAssignmentOptionsBody,
  Fragment
} from './schemas'



  /**
 * Assign a single case to a user, list or organisation.
 * @summary Case assignment
 */
export const casesCaseAssignment = <TData = AxiosResponse<CovidCase>>(
    _case: string,
    caseAssignment: CaseAssignment, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/cases/${_case}/assignment`,
      caseAssignment,options
    );
  }

/**
 * Retrieve available assignment options for a single case.
 * @summary Case assignment options
 */
export const casesCaseAssignmentOptions = <TData = AxiosResponse<CasesCaseAssignmentOptions200>>(
    _case: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/cases/${_case}/assignment/options`,undefined,options
    );
  }

/**
 * Assign multiple cases to a user, list or organisation.
 * @summary Multi case assignment
 */
export const casesAssignment = <TData = AxiosResponse<CaseAssignmentStatus[] | void>>(
    casesAssignmentBody: CasesAssignmentBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/cases/assignment`,
      casesAssignmentBody,options
    );
  }

/**
 * Retrieve available assignment options for multiple cases.
 * @summary Multi case assignment options
 */
export const casesAssignmentOptions = <TData = AxiosResponse<CasesAssignmentOptions200>>(
    casesAssignmentOptionsBody: CasesAssignmentOptionsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/cases/assignment/options`,
      casesAssignmentOptionsBody,options
    );
  }

/**
 * Load the fragment from the database.
 * @summary Load the context fragment
 */
export const loadFragment = <TData = AxiosResponse<Fragment>>(
    context: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/contexts/${context}/fragments/contact`,options
    );
  }

/**
 * Update the fragment in the database.
 * @summary Update the context fragment
 */
export const updateFragment = <TData = AxiosResponse<Fragment>>(
    context: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/contexts/${context}/fragments/contact`,undefined,options
    );
  }

export type CasesCaseAssignmentResult = AxiosResponse<CovidCase>
export type CasesCaseAssignmentOptionsResult = AxiosResponse<CasesCaseAssignmentOptions200>
export type CasesAssignmentResult = AxiosResponse<CaseAssignmentStatus[] | void>
export type CasesAssignmentOptionsResult = AxiosResponse<CasesAssignmentOptions200>
export type LoadFragmentResult = AxiosResponse<Fragment>
export type UpdateFragmentResult = AxiosResponse<Fragment>
