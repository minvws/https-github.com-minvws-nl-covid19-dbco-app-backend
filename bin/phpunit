#!/bin/bash
BASE_PATH=$(dirname $0)/..
PROJECT_NAME=dbco-test

echo "=====[ Start containers ]======================="
docker-compose --env-file ./.env.test -p $PROJECT_NAME -f docker-compose.yml -f docker-compose.test.yml up -d
sleep 5

echo "=====[ Setup database ]========================="
docker-compose --env-file ./.env.test -p $PROJECT_NAME -f docker-compose.yml -f docker-compose.test.yml run --rm psql --host=postgres --user=postgres < $BASE_PATH/install/tables.sql
docker-compose --env-file ./.env.test -p $PROJECT_NAME -f docker-compose.yml -f docker-compose.test.yml run --rm --entrypoint bash psql -c "psql --host=postgres --user=postgres -c \"CREATE USER api PASSWORD '\$API_PASSWORD'"\"
docker-compose --env-file ./.env.test -p $PROJECT_NAME -f docker-compose.yml -f docker-compose.test.yml run --rm --entrypoint bash psql -c "psql --host=postgres --user=postgres -c \"CREATE USER console PASSWORD '\$CONSOLE_PASSWORD'"\"
docker-compose --env-file ./.env.test -p $PROJECT_NAME -f docker-compose.yml -f docker-compose.test.yml run --rm psql --host=postgres --user=postgres < $BASE_PATH/install/permissions.sql

#echo "=====[ CONSOLE ]====="
#docker-compose --env-file ./.env.test -p $PROJECT_NAME -f docker-compose.yml -f docker-compose.test.yml run --rm --entrypoint=/src/vendor/bin/phpunit console
#echo
echo "=====[ PRIVATE API ]====="
docker-compose --env-file ./.env.test -p $PROJECT_NAME -f docker-compose.yml -f docker-compose.test.yml run --rm --entrypoint=/src/vendor/bin/phpunit private
echo

echo "=====[Bringing containers down]====="
docker-compose --env-file ./.env.test -p $PROJECT_NAME -f docker-compose.yml -f docker-compose.test.yml down
docker volume rm "${PROJECT_NAME}_postgres-data"
echo
