#!/usr/bin/env bash

set -eo pipefail

BASE_PATH=$(dirname $0)/..

. $BASE_PATH/.env.test

pushd $BASE_PATH > /dev/null
FULL_PATH=$(pwd)
BASE_NAME=$(basename $FULL_PATH)
popd > /dev/null

PROJECT_NAME=$BASE_NAME-test

DOCKER_COMPOSE="docker compose --project-directory=$BASE_PATH --project-name $PROJECT_NAME --env-file $BASE_PATH/.env.test --file $BASE_PATH/docker-compose/docker-compose.test.yml"
DOCKER_COMPOSE_TOOLS="$DOCKER_COMPOSE --file $BASE_PATH/docker-compose/docker-compose.tools.yml"

# actions
RESET_ENV=
SETUP_ENV=
SHUTDOWN=
WIPE=
SKIP_TESTS=
CODE_COVERAGE=--no-coverage
SHELL=
MYSQL=

# Parse options
while :; do
  case $1 in
    --reset)
      RESET_ENV=true
      ;;

    --setup)
      SETUP_ENV=true
      ;;

    --shutdown)
      SHUTDOWN=true
      ;;

    --wipe)
      WIPE=true
      ;;

    --skip-tests)
      SKIP_TESTS=true
      ;;

    --code-coverage)
      CODE_COVERAGE=--disable-coverage-ignore
      ;;

    --shell)
      SKIP_TESTS=true
      SHELL=true
      ;;

    --mysql)
      SKIP_TESTS=true
      MYSQL=true
      ;;

    --)              # End of all options.
      shift
      break
      ;;
    -?*)
      echo "Unknown option (ignored): $1"
      exit 1;
      ;;
    *)               # Default case: If no more options then break out of the loop.
      break
  esac
  shift
done

CONTAINER=$1
PHPUNIT_ARGS=${@:2}

if [ "$RESET_ENV" == "true" ]; then
  echo "=====[ RESET ]====="
  $DOCKER_COMPOSE down --remove-orphans -v
  $DOCKER_COMPOSE build
  echo
fi

if [ -z "$SHUTDOWN" ]; then
  echo "=====[ START CONTAINERS ]====="
  $DOCKER_COMPOSE up --detach --remove-orphans

  echo
  echo "=====[ START MYSQL DATABASE ]========================="
  echo "Waiting for MYSQL to launch..."
  while ! $DOCKER_COMPOSE_TOOLS run --rm mysqlclient -e "SELECT 1" > /dev/null 2>&1; do
    echo "  > mysql not yet running ..."
    sleep 0.5
  done
fi

if [ "$SETUP_ENV" == "true" ] || [ "$RESET_ENV" == "true" ]; then
  sleep 5

  echo
  echo "=====[ SETUP MYSQL DATABASE ]========================="
  $DOCKER_COMPOSE_TOOLS run --rm mysqlclient -e "CREATE USER 'admin'@'%' IDENTIFIED BY '$DB_ADMIN_PASSWORD'"
  $DOCKER_COMPOSE_TOOLS run --rm mysqlclient -e "CREATE USER 'portal'@'%' IDENTIFIED BY '$PORTAL_DB_PASSWORD'"
  $DOCKER_COMPOSE_TOOLS run --rm -T mysqlclient < $BASE_PATH/services/mysql/permissions.sql
fi

if [ "$MYSQL" == "true" ]; then
    echo
    echo "=====[ MYSQL ]====="
    $DOCKER_COMPOSE_TOOLS run --rm mysqlclient

    if [ "$SHUTDOWN" == "true" ]; then
      echo
      echo "=====[ STOP CONTAINERS ]====="
      $DOCKER_COMPOSE stop
    fi

    exit 0
fi

if [ "$WIPE" == "true" ]; then
  echo
  echo "=====[ WIPE DATABASE ]====="
  $DOCKER_COMPOSE run --rm --entrypoint php portal artisan db:wipe --env=testing
fi

if [ -z "$SHUTDOWN" ] && { [ "$SETUP_ENV" == "true" ] || [ "$RESET_ENV" == "true" ] || [ "$WIPE" == "true" ] || [ -z "$CONTAINER" ] || [ "$CONTAINER" == "portal" ]; }; then
  echo
  echo "=====[ RUN MIGRATIONS ]====="
  $DOCKER_COMPOSE run --rm --entrypoint php portal artisan migrate --env=testing
fi

if [ "$SETUP_ENV" == "true" ] || [ "$RESET_ENV" == "true" ] || [ "$WIPE" == "true" ]; then
  echo
  echo "=====[ SEED DATA ]====="
  $DOCKER_COMPOSE run --rm  --env APP_ENV=testing --entrypoint php portal artisan db:seed --env=testing
fi

if [ -z "$SKIP_TESTS" ] && [ -z "$SHUTDOWN" ]; then
  if [ -z "$CONTAINER" ] || [ "$CONTAINER" == "gateway" ]; then
    echo
    echo "Waiting for RabbitMQ to launch..."
    while ! $DOCKER_COMPOSE_TOOLS exec rabbitmq rabbitmq-diagnostics -q check_running; do
      echo "  > RabbitMQ not yet running ..."
      sleep 0.5
    done

    echo
    echo "=====[ RUN TESTS FOR GATEWAY ]====="
    $DOCKER_COMPOSE run --rm --entrypoint=/src/vendor/bin/phpunit gateway $PHPUNIT_ARGS
  fi

  if [ -z "$CONTAINER" ] || [ "$CONTAINER" == "portal" ]; then
    echo
    echo "=====[ RUN TESTS FOR PORTAL ]====="
    $DOCKER_COMPOSE run --rm --entrypoint php portal vendor/bin/phpunit -c phpunit.xml.dist $CODE_COVERAGE $PHPUNIT_ARGS
  fi
fi

if [ "$CONTAINER" == "portal" ]; then
  echo
  echo "=====[ SHELL FOR PORTAL ]====="
  $DOCKER_COMPOSE run --rm --entrypoint=/bin/bash portal
fi

if [ "$CONTAINER" == "gateway" ]; then
  echo
  echo "=====[ SHELL FOR GATEWAY ]====="
  $DOCKER_COMPOSE run --rm --entrypoint=/bin/bash gateway
fi

if [ "$SHUTDOWN" == "true" ]; then
  echo
  echo "=====[ STOP CONTAINERS ]====="
  $DOCKER_COMPOSE stop
fi
