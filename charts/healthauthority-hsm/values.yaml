# Default values for ha hsm

image:
  repository: ghcr.io/minvws/nl-covid19-dbco-app-backend-private/healthauthority-api
  tag: 0.2.1
  pullPolicy: IfNotPresent

imagePullSecrets:

console:
  args: ["security:manage-keys"]

# Redis
redis:
  host:
  port: 6379
  sentinel:
    service:

# Encryption
security:
  module:
    type: hsm
    hsm:
      useExistingSecret: false
      slot:
        label: slot1
      user:
        pin: changeme
      pkcs11: |
        [Global]
        Logging = 0

        KeysExternal = true
        KeyStore = /data/utimaco/slot1.pks

        SlotMultiSession = true
        SlotCount = 30
        KeepLeadZeros = false

        FallbackInterval = 0

        [CryptoServer]
        Device = { hsm }

        CommandTimeout = 300000
        ConnectionTimeout = 60000
        KeepAlive = true

# To use simple security module during development:
# security.module.sk.exchange.key = docker run --rm php -r "echo base64_encode(sodium_crypto_box_secretkey(sodium_crypto_box_keypair()));"
# security.module.sk.store = docker run --rm php -r "echo base64_encode(sodium_crypto_secretbox_keygen());"

# security:
  # module:
    # type: simple
    # sk:
      # useExistingSecret: false # if true, create a secret with `app.fullname-encryption` in the same namespace
      # key:
        # exchange:
      # store:

# Debug
debug: 0

persistence:
  enabled: false
  accessModes:
  - ReadWriteOnce
  size: 1Gi
  annotations: {}
  # selector:
  #   matchLabels:
  #     app.kubernetes.io/name: healthauthority-hsm
  # existingClaim:
  storageClassName: redundant

serviceAccount:
  # Specifies whether a service account should be created
  enabled: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

resources:
  limits:
  requests:
    cpu: 1m
    memory: 16Mi

securityContext:
  runAsNonRoot: true
  runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations: {}
