# Default values for portal

replicaCount: 1
strategy:
  type: RollingUpdate
image:
  repository: ghcr.io/minvws/nl-covid19-dbco-app-backend-private/portal
  tag: 0.0.0
  pullPolicy: IfNotPresent
imagePullSecrets:
service:
  enabled: true
  type: ClusterIP
  httpPort: 8080
  externalPort: 8080
# metrics-server add-on required

hpa:
  enabled: false
  maxReplicas: 10
  # average total CPU usage per pod (1-100)
  cpu:
  # average memory usage per pod (100Mi-1Gi)
  memory:
  # average http requests per second per pod (k8s-prometheus-adapter)
  requests:
envSecrets: {}
emptyCustomConfigMap: false
emptyCustomSecrets: false
# Configure volumes for mounting files (e.g. using ConfigMap, Secret) in your containers
volumeMounts: ""
volumes: ""
# Scheduler
# It takes a Cron format string, such as * * * * * (every minute)
scheduler:
  schedule: "* * * * *"
  successfulJobsHistoryLimit: 3
  restartPolicy: OnFailure
  concurrencyPolicy: Allow
cronJobs:
  # Cleanup
  # Used to schedule wipes of the DB (leave disabled for prod!!)
  portal-cleanup:
    name: cleanup
    enabled: false
    cronjob:
      args:
        - >-
          php artisan db:wipe -n --force;
          php artisan migrate -n --force;
          php artisan db:seed -n --force;
          php artisan db:seed --class DummySeeder -n --force;
          php artisan test-cases-ls1:generate 5000 -n;
      schedule: "0 0 * * 0"
      successfulJobsHistoryLimit: 3
      restartPolicy: Never
      backoffLimit: 0
      concurrencyPolicy: Forbid
  portal-generate-cases:
    name: generate-cases
    enabled: false
    cronjob:
      args:
        - >-
          - php artisan test-data:generate 15000 -n --force;
      schedule: "30 18 * * *"
      successfulJobsHistoryLimit: 3
      restartPolicy: Never
      backoffLimit: 0
      concurrencyPolicy: Forbid
# Apache
apache:
  run:
    user: "www-data"
    group: "www-data"
serviceAccount:
  # Specifies whether a service account should be created
  enabled: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
serviceMonitor:
  enabled: false
  interval: 15s
  path: /prometheus/metrics
ingress:
  enabled: false
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  path: /*
  hosts: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
livenessProbe:
  httpGet:
    path: /ping
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

healthauthorityHsm:
  enabled: true

  console:
    args: ["artisan", "security:manage-keys"]
  env:
    DEBUG: "0"
    REDIS_HSM_HOST: portal-healthauthority-hsm-redis
    REDIS_HSM_PORT: "6379"
    SECURITY_MODULE_NONCE_USE_PHP_RANDOM_BYTES: "1"
    SECURITY_MODULE_TYPE: hsm
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 1Gi
    annotations: {}
    # selector:
    #   matchLabels:
    #     app.kubernetes.io/name: healthauthority-hsm
    existingClaim: storage-healthauthority-hsm-0
    storageClassName: redundant

  livenessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - "php artisan security:get-key-exchange-public-key"
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 10
    successThreshold: 1

  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  redis:
    enabled: true
    config: |
      save ""
      appendonly no
    useSecret: true # if enabled, config will be used using a Secret. secretName must be portal-healthauthority-hsm-redis
    strategyType: RollingUpdate
    image:
      repository: redis
      tag: 6
      pullPolicy: IfNotPresent
    livenessProbe:
      tcpSocket:
        port: redis
      initialDelaySeconds: 10
      timeoutSeconds: 5
      periodSeconds: 10
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      exec:
        command:
          - sh
          - -c
          - redis-cli -h $(hostname) ping
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    resources:
      limits:
        memory: 128Mi
      requests:
        memory: 64Mi
        cpu: 1m
    containerSecurityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
    lifecycle: {}
    terminationGracePeriodSeconds: 60
    nodeSelector: {}
    tolerations: []
    affinity: {}

readinessProbe:
  httpGet:
    path: /status
    port: http
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
resources:
  limits:
  requests:
    cpu: 1m
    memory: 16Mi
# Example to set an hostAlias:
# hostAliases:
# - ip: "10.43.41.93"
#   hostnames:
#   - "login.ggdghor.nl"
containerSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: RuntimeDefault
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 33
lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "sleep 15 && apachectl -k graceful-stop"]
terminationGracePeriodSeconds: 60
nodeSelector: {}
tolerations: []
affinity: {}
podAnnotations: {}
runMigrations: true

prometheus:
  rules:
    enabled: true
    additionalLabels: {}

# Default values for osiris-message-worker
osirisMessageWorker:
  enabled: false
  replicaCount: 1

  command: ["supervisord"]
  args: ["--configuration=/etc/supervisor/supervisord.osiris-worker.conf"]

  # Environment variables that will be passed into the container
  # env:
  # OSIRIS_SEND_CASE_ENABLED: "true"
  # OSIRIS_BASE_URL:
  # RABBITMQ_HOST:
  # RABBITMQ_PORT:
  # RABBITMQ_VHOST:
  env: {}
  # Environment variables secrets that will be passed into the container.
  # When set. This will generate a Secret with the name `app.fullname`.
  # When not set. You can create a secret yourself with the name `app.fullname`.
  # envSecrets:
  # OSIRIS_LOGIN:
  # OSIRIS_PASSWORD:
  # RABBITMQ_USER:
  # RABBITMQ_PASSWORD:
  envSecrets: {}
  # Configure volumes for mounting files (e.g. using ConfigMap, Secret) in your containers
  volumeMounts: ""
  volumes: ""

  livenessProbe: {}
  readinessProbe: {}

  resources:
    requests:
      cpu: 1m
      memory: 16Mi

  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000

  lifecycle: {}
  terminationGracePeriodSeconds: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}

#Default values for default-worker
defaultWorker:
  enabled: false
  replicaCount: 1

  command: ["supervisord"]
  args: ["--configuration=/etc/supervisor/supervisord.default-worker.conf"]
  # Environment variables that will be passed into the container
  # env:
  env: {}
  # Environment variables secrets that will be passed into the container.
  # When set. This will generate a Secret with the name `app.fullname`.
  # When not set. You can create a secret yourself with the name `app.fullname`.
  # envSecrets:
  envSecrets: {}
  # Configure volumes for mounting files (e.g. using ConfigMap, Secret) in your containers
  volumeMounts: ""
  volumes: ""

  livenessProbe: {}
  readinessProbe: {}

  resources:
    requests:
      cpu: 1m
      memory: 16Mi

  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000

  lifecycle: {}
  terminationGracePeriodSeconds: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}

#Default values for default-worker
testResultWorker:
  enabled: false
  replicaCount: 1

  command: ["supervisord"]
  args: ["--configuration=/etc/supervisor/supervisord.test-result-worker.conf"]
  # Environment variables that will be passed into the container
  # env:
  env: {}
  # Environment variables secrets that will be passed into the container.
  # When set. This will generate a Secret with the name `app.fullname`.
  # When not set. You can create a secret yourself with the name `app.fullname`.
  # envSecrets:
  envSecrets: {}
  # Configure volumes for mounting files (e.g. using ConfigMap, Secret) in your containers
  volumeMounts: ""
  volumes: ""

  livenessProbe: {}
  readinessProbe: {}

  resources:
    requests:
      cpu: 1m
      memory: 16Mi

  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000

  lifecycle: {}
  terminationGracePeriodSeconds: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
